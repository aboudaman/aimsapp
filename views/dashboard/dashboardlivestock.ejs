                <!-- App favicon -->
                <!-- <link rel="shortcut icon" href="assets/images/favicon.ico"> -->

                <!-- third party css -->
                <!-- <link href="assets/css/vendor/jquery-jvectormap-1.2.2.css" rel="stylesheet" type="text/css" /> -->
                <!-- third party css end -->
        
                <!-- App css -->
                <!-- <link href="assets/css/icons.min.css" rel="stylesheet" type="text/css" /> -->
                <!-- <link href="assets/css/app-modern.min.css" rel="stylesheet" type="text/css" id="light-style" /> -->
                <!-- <link href="assets/css/app-modern-dark.min.css" rel="stylesheet" type="text/css" id="dark-style" /> -->

                <!-- BOTS ID 5ee1f47ef29c0d1560f76205 -->
                <style>
                    .button:active {
                        background-color: #3e8e41;
                        box-shadow: 0 5px #666;
                        transform: translateY(4px);
                        }
                        .bar-chart {  
    background-color: #C7D9D9;  
}
                    .banner {
                        color: white;
                    }
                    
                    .wrapper {
                        display: -webkit-box;
                        display: flex;
                    }
                    
                    .plus::after {
                        content: '\002B';
                        float: right;
                        font-weight: bold;
                    
                    }
                    .btn-link:hover{
                        text-decoration: none;
                    }
                    .bar::after {
                        content: "\2212";
                    
                    }
                    .dropdown-menu {
                    
                        max-height: max-content;
                        max-width: max-content;
                    }
                    .left-bar {
                        border: 1px solid whitesmoke;
                        padding: 10px;
                        box-shadow: 5px 10px 18px whitesmoke;
                        margin-top: 10px;
                        position: relative;
                        background-color: white;
                        min-width: 300px;
                        max-width: 300px;
                    }
                    </style>
                    <%- include("../submenu/admin_sadc") -%>
                    
                    <div class="container-fluid">
                        <div class="row" style="margin-top: 45px;">
                            <div class="col-md-4">
                                <form>
                                    <div class="left-bar">
                                        <div style="padding: 30px 20px; text-align: center;">
                                            <span>
                                                <img src="/assets/images/flags/sidebar-flag.jpg" alt="SADC Flag" style="width:65px;height:62px;" class="rounded-circle">
                                            </span>
                                        </div>
                            
                                            <!-- Start Accordion -->
                                            <div class="accordion" id="accordionExample">
                                                <div class="card">
                                                    <div class="card-header" id="headingOne">
                                                        <h2 class="mb-0">
                                                        <button class="btn btn-link btn-block text-left plus" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                                            Member States
                                                        </button>
                                                        </h2>
                                                    </div>
                                                    
                                                    <!-- Accordion Content -->
                                                    <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordionExample">
                                                        <div class="card-body">
                                                            <% memberStates.forEach(member =>  { %>
                                                                <div class=" form-check">
                                                                    <input type="checkbox" class="form-check-input" 
                                                                     name="member" value="<%= member %>">
                                                                    <label class="form-check-label capital" for= <%= member %>>  <%= member %></label>
                                                                </div>
                                                            <% }) %>
                    
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="card">
                                                    <div class="card-header" id="headingTwo">
                                                        <h2 class="mb-0">
                                                        <button class="btn btn-link btn-block text-left collapsed plus" type="button" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                                            Select Livestock
                                                        </button>
                                                        </h2>
                                                    </div>
                                                    <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordionExample">
                                                        <div class="card-body">
                                                            <% livestocks.forEach(livestock =>  { %>
                                                                <div class=" form-check">
                                                                    <input type="checkbox" class="form-check-input" name="livestock" value="<%= livestock %>">
                                                                    <label class="form-check-label capital" for= <%= livestock %>>  <%= livestock %></label>
                                                                </div>
                                                            <% }) %>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="card">
                                                    <div class="card-header" id="headingThree">
                                                        <h2 class="mb-0">
                                                        <button class="btn btn-link btn-block text-left collapsed plus" type="button" data-toggle="collapse" data-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                                                            Indicators
                                                        </button>
                                                        </h2>
                                                    </div>
                                                    <div id="collapseThree" class="collapse" aria-labelledby="headingThree" data-parent="#accordionExample">
                                                        <div class="card-body">
                                                            <% liveStockIndicators.forEach(indicator =>  { %>
                                                                <div class=" form-check">
                                                                    <input type="checkbox" class="form-check-input" name="indicator" value="<%= indicator %>">
                                                                    <label class="form-check-label capital" for= <%= indicator %>>  <%= indicator %></label>
                                                                </div>
                                                            <% }) %>
                                                        </div>
                                                    </div>
                                                </div>
                    
                                                <div class="card">
                                                    <div class="card-header" id="headingFour">
                                                        <h2 class="mb-0">
                                                        <button class="btn btn-link btn-block text-left collapsed plus" type="button" data-toggle="collapse" data-target="#collapseFour" aria-expanded="false" aria-controls="collapseThree">
                                                            Reporting Period
                                                        </button>
                                                        </h2>
                                                    </div>
                                                    <div id="collapseFour" class="collapse" aria-labelledby="headingFour" data-parent="#accordionExample">
                                                        <div class="card-body">
                                                            <!-- Hardcoded - Need to create database table for years -->
                                                            <div class=" form-check">
                                                                <input type="checkbox" class="form-check-input" name="year" value="2010">
                                                                <label class="form-check-label" for="year">  2010</label>
                                                            </div>
                                                            <div class=" form-check">
                                                                <input type="checkbox" class="form-check-input" name="year" value="2011">
                                                                <label class="form-check-label" for="year">  2011</label>
                                                            </div>
                                                            <div class=" form-check">
                                                                <input type="checkbox" class="form-check-input" name="year" value="2012">
                                                                <label class="form-check-label" for="year">  2012</label>
                                                            </div>
                                                            <div class=" form-check">
                                                                <input type="checkbox" class="form-check-input" name="year" value="2013">
                                                                <label class="form-check-label" for="year">  2013</label>
                                                            </div>
                                                            <div class=" form-check">
                                                                <input type="checkbox" class="form-check-input" name="year" value="2014">
                                                                <label class="form-check-label" for="year">  2014</label>
                                                            </div>
                                                            <div class=" form-check">
                                                                <input type="checkbox" class="form-check-input" name="year" value="2015">
                                                                <label class="form-check-label" for="year">  2015</label>
                                                            </div>
                                                            <div class=" form-check">
                                                                <input type="checkbox" class="form-check-input" name="year" value="2016">
                                                                <label class="form-check-label" for="year">  2016</label>
                                                            </div>
                                                            <div class=" form-check">
                                                                <input type="checkbox" class="form-check-input" name="year" value="2017">
                                                                <label class="form-check-label" for="year">  2017</label>
                                                            </div>
                                                            <div class=" form-check">
                                                                <input type="checkbox" class="form-check-input" name="year" value="2018">
                                                                <label class="form-check-label" for="year">  2018</label>
                                                            </div>
                                                            <div class=" form-check">
                                                                <input type="checkbox" class="form-check-input" name="year" value="2019">
                                                                <label class="form-check-label" for="year">  2019</label>
                                                            </div>
                                                            <div class=" form-check">
                                                                <input type="checkbox" class="form-check-input" name="year" value="2020">
                                                                <label class="form-check-label" for="year">  2020</label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <!-- End Accordion -->
                                            <button style="margin-top: 30px;" type="submit" onclick="displayLoader()" class="btn button btn-primary">Run Report</button>
                                    </div>
                                </form>
                            </div>
                            <div class="col-md-8">
                                <div class="row">
                                    <div class="col-md-4">
                                        <h4 style="line-height: 50px;">Dashboard</h4>
                                    </div>
                                    <div class="col-md-8">
                                        <!-- Add Graph Menus -->
                                        <ul class="nav nav-pills mb-3 float-right" id="pills-tab" role="tablist">
                                            <li class="nav-item">
                                                <a class="nav-link active" id="pills-schart-tab" 
                                                data-toggle="pill" href="#pills-schart" role="tab" aria-controls="pills-schart" aria-selected="false">
                                                    <img src="/images/chart.png" style="width: 40px; height: 40px;"class="rounded" alt="Bar Chart"></a>
                                            </li>
                                            <li class="nav-item">
                                            <a class="nav-link" id="pills-bchart-tab" 
                                            data-toggle="pill" href="#pills-bchart" role="tab" aria-controls="pills-bchart" aria-selected="true">
                                                <img src="/images/Pie-chart-icon.png" style="width: 40px; height: 40px;"class="rounded" alt="Pie Chart"></a>
                                            </li>
                                            <li class="nav-item">
                                            <a class="nav-link" id="pills-lgraph-tab" 
                                            data-toggle="pill" href="#pills-lgraph" role="tab" aria-controls="pills-lgraph" aria-selected="false">
                                                <img src="/images/line.png" style="width: 40px; height: 40px;"class="rounded" alt="Line Chart"></a>
                                            </li>
                                            <li class="nav-item">
                                                <a class="nav-link" id="pills-dtable-tab" 
                                                data-toggle="pill" href="#pills-dtable" role="tab" aria-controls="pills-dtable" aria-selected="false">
                                                <img src="/images/table.png" style="width: 40px; height: 40px;"class="rounded" alt="Table Format"></a>
                                            </li>
                                      </ul>
                    
                                    </div>
                                </div>
                                <div class="row">
                                    <!-- <div class="col"><div id="barArea">Bar Here</div></div> -->
                                    <!-- <div class="col"><div id="pieArea">Pie Here</div></div> -->
                                </div>
                                <div class="row">
                                    <div class="col">
                                            <div class="spinner-border text-primary row justify-content-center" id="loader" 
                                            role="status" style="display: none; margin-left: 50%;">
                                            <span class="sr-only" >Loading...</span>
                                            </div>
                    
                                        <!-- <p class="text-center display-5" id="nodata">No Data has been loaded.  Please run a query!</p> -->
                                        <div class="alert alert-warning" id="nodata" role="alert">
                                            No Data has been loaded.  Please run a query!
                                        </div>
                                        <div class="alert alert-danger" id="nodata2" role="alert" style="display: none;">
                                            There is no data found.  Please try another query. 
                                        </div>
                                        <div class="tab-content" id="pills-tabContent">
                                            <div class="tab-pane fade show active" id="pills-schart" 
                                            role="tabpanel" aria-labelledby="pills-schart">
                                                <!-- <canvas id="barArea"></canvas> -->
                                                <!-- <div id="testBar"></div> -->
                                                <div>
                                                    <!-- <svg id="testBar" height="600" width="600"></svg> -->
                                                    <!-- <svg id="testLegend" height="500" width="500"></svg> -->
                                                </div>

                                                <!-- <div>
                                                    <svg id="testLegend" height="500" width="500"></svg>
                                                </div> -->
                                                
                                            </div>
                                            <div class="tab-pane fade" id="pills-bchart" 
                                                role="tabpanel" aria-labelledby="pills-bchart-tab">
                                                <!-- <h6>Percentage Livestock Slaughtered</h6> -->
                                                    <div id="pieArea"></div>
                                            </div>
                                            <div class="tab-pane fade show" id="pills-lgraph" 
                                                role="tabpanel" aria-labelledby="pills-lgraph">
                                                <!-- <h6>Cattle Birth Numbers</h6> -->
                                                <canvas id="lineArea"></canvas>
                                            </div>
                                            <div class="tab-pane fade" id="pills-dtable" 
                                                role="tabpanel" aria-labelledby="pills-dtable-tab">
                                                <div id="tableArea" style="width: 600px; height: 600px;">Data Table Here</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                    
                        </div>
                    </div>


                    <!-- <div>
                        <svg id="testBar" height=600 width=450></svg>
                    </div> -->
                    <!-- <div id="testLegend"></div> -->
                    <!-- <canvas id="myChart"></canvas> -->
                    <!-- <div id="testChart" style="width: 600px; height: 500px;"></div> -->
                     
<script>
// ***********************************************

function displayLoader() {
    loader.style.display = "block"
}
// *************************

// Function to generate a random color
function getRandomColor() {
    const letters = '0123456789ABCDEF'.split('');
    let color = '#';
    for (var i = 0; i < 6; i++ ) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}

// #### START DATA TABLE AREA ####

// const drawTable = (data3) => {

    //    for (let i in data3) {
               
    //         let tempDates = []
    //             // console.log('data json', data3)
    //         // console.log('result in loop', data1JSON[i][0].memberState)
    //         // console.log(result[i])
    //         // t1.push({
    //         //         label: '',
    //         //         backgroundColor: getRandomColor(),
    //         //         borderColor: 'rgb(255, 99, 132)',
    //         //         data:[]
    //         //     })

    //         t2.push({dates:[]})

            
            
    //         data3[i].forEach((ele, idx) => {
                
    //             // console.log('ele', ele.memberState)
    //             // console.log('tempCol[i]', tempCol[count])
    //             // console.log(ele.memberState + ' ' + ele.livestock)
    //             // t1[label].push('hwllo')
    //             // t1.push({label: ele.memberState + ' ' + ele.livestock})
    //             // t1.push({backgroundColor: getRandomColor()})
    //             t1.push({
    //                 label: ele.memberState + ' ' + ele.livestock,
    //                 backgroundColor: getRandomColor(),
    //                 borderColor: 'rgb(255, 99, 132)',
    //                 data: [ele.quantity]
    //                 // data:[{x: new Date(ele.year).getFullYear(), y: ele.quantity}]
    //             })

    //             // data: [{x:'2016-12-25', y:20}, {x:'2016-12-26', y:10}]
    //             // t1[c].data.push(ele.quantity)
    //             tempData.push(ele.quantity)
    //             tempDates.push(new Date(ele.year).getFullYear())
    //             // dates.push(new Date(ele.year).getFullYear())
    //             tDates.push(new Date(ele.year).getFullYear())
    //             // t1[idx].data.unshift(22)
               
    //             gui.labels.push(ele.year)
    //             gui.datasets.push({
    //                 label: 'hello',
    //                 backgroundColor: 'rgb(255, 99, 132)',
    //                 borderColor: 'rgb(255, 99, 132)',
    //                 data: [ele.quantity]
    //             })
    //         })
    

// #### END DATA TABLE AREA ####

// Get value of checked box
// console.log(document.querySelectorAll('[name="member"]')[1].value)

// ###### START Line Chart Area#####
const lineChart = async (data1JSON, data2JSON) => {

    let data = ""
    let dateArr = []
    let keys = []
    let count = 0;
    const tempCol = Object.keys(data1JSON)
    let t1 = []
    let t2 = []
    let dates = []
    let gui = {
        labels:[],
        datasets: []
    }
    let tDates = []

    // console.log(data1JSON)
    // let chart = ""
    // const colors = ["red","blue","orange","green", "purple"]
    // Bar chart here

    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    var ctx = document.getElementById('lineArea').getContext('2d');

       for (let i in data1JSON) {
                let tempData = []
                let tempDates = []
            // console.log('result in loop', data1JSON[i][0].memberState)
            // console.log(result[i])
            // t1.push({
            //         label: '111',
            //         backgroundColor: getRandomColor(),
            //         borderColor: 'rgb(255, 99, 132)',
            //         data:[]
            //     })
            t2.push({dates:[]})

            

            data1JSON[i].forEach(ele => {
                // console.log('ele', ele.memberState)
                // console.log('tempCol[i]', tempCol[count])
                // console.log(ele.memberState + ' ' + ele.livestock)
                // t1[label].push('hwllo')
                // t1.push({label: ele.memberState + ' ' + ele.livestock})
                t1.push({
                    label: ele.memberState + ' ' + ele.livestock,
                    backgroundColor: getRandomColor(),
                    borderColor: 'rgb(255, 99, 132)',
                    data:[]
                })
                tempData.push(ele.quantity)
                tempDates.push(new Date(ele.year).getFullYear())
                // dates.push(new Date(ele.year).getFullYear())
                tDates.push(new Date(ele.year).getFullYear())
                if (ele.memberState == tempCol[count]) {}
            })
            t1[count].data = tempData
            t2[count].dates = tempDates
            gui.labels.push({labels: tempDates})
            gui.datasets.push({datasets: tempData})
            // console.log('result in loop',result[i].memberState)
            // console.log('t1: ', t1)
            // console.log('t2: ', t2)
            // console.log('tempData: ', tempData)
            count++
            }


            // t1.forEach(d => console.log(d.data))
            // console.log(gui)
            // console.log(tDates)


            draw(t1, t2)
            function draw(dataset, dataset2) {
                // console.log('dataset', typeof(t1[0].data))
                // console.log('dataset2', typeof(t2[0].dates))
                // console.log('Object Values', Object.values(t1[0].data))
                // let arr = Object.values(t1[0].data)
                let d = []


                // console.log('arr', arr)



                var chart = new Chart(ctx, {
                // The type of chart we want to create
                type: 'line',
                // The data for our dataset
                data: {
                // labels: ['2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020'],
                labels: tDates,
                datasets:dataset
                },

                //     datasets: [{
                //         label: 'My First dataset',
                //         backgroundColor: 'rgb(255, 99, 132)',
                //         borderColor: 'rgb(255, 99, 132)',
                //         // data: [0, 10, 5, 2, 20, 30, 45],
                //         data: t1[0].data,
                //     },
                //     {
                //         label: 'My Second dataset',
                //         backgroundColor: 'blue',
                //         borderColor: 'rgb(255, 99, 132)',
                //         data: [1000, 2220, 58880, 20888, 67770, 9000, 10005],
                //     }

                // ]
                // },

                // Configuration options go here
                options: {
                    title: {
            display: true,
            text: 'Annual Livestock Report per SADC Member State'
        }
                    }
                });

            }

}

// ###### END Line Chart Area ######
// ***********************************************************************************************

// #### Start Bar Chart ####
const barChart = async (data1JSON, data2JSON, data3JSON) => {
    // console.log(data1JSON)
    // console.log(data2JSON)
    console.log('data2', data3JSON)

// ********* TEST Stacked Bar ****************
let dataset2 = data3JSON
    let keys = []

    for (let ele in dataset2) {
        dataset2[ele].forEach(d => {
            // keys[d.memberState] = d.quantity
            keys.push({
                [d.memberState] : d.quantity
            })
            // console.log(d)
        })



    }
    console.log(keys)
var w = 800,
                h = 400,
                padding = 40;

            var dataset = [
                { apples: 5,  oranges: 10, grapes: 22 },
                { apples: 4,  oranges: 12, grapes: 28 },
                { apples: 2,  oranges: 19, grapes: 32 },
                { apples: 7,  oranges: 23, grapes: 35 },
                { apples: 23, oranges: 17, grapes: 43 },
            ];



            var fruits = Object.keys(dataset[0]);
            // console.log(fruits)
            // var fruits = keys;
            console.log(fruits)

            var colors = d3.scaleOrdinal(d3.schemeCategory10);

            var xScale = d3.scaleBand()
                .domain(d3.range(dataset.length))
                .range([padding, w - padding])
                .paddingInner(0.05);

            var yScale = d3.scaleLinear()
                .domain([0, d3.max(dataset, function(d) {
                    var total = 0;
                    for (var i = 0; i < fruits.length; i++) {
                        console.log(d[fruits[i]])
                        total += d[fruits[i]]
                    }
                    console.log('total ', total)
                    return total;
                })])
                .range([h - padding, 0]);

            // var yScale = d3.scaleLinear()
            //           .domain([0, 70000])
            //           .range([ height, 0])
            
            var yAxis = d3.axisLeft()
                .scale(yScale)
                .ticks(6);

            var stack = d3.stack()
                .keys(fruits)
                .order(d3.stackOrderDescending);
            
            var series = stack(dataset);
            
            var svg = d3.select('svg')
                .attr('width', w)
                .attr('height', h)

            var groups = svg.selectAll('g')
                .data(series)
                .enter()
                .append('g')
                .style('fill', function(d, i){
                    return colors(i);
                });

            var rects = groups.selectAll('rect')
                .data(function(d){
                    console.log('d up', d)
                     return d
                })
                .enter()
                .append('rect')
                .attr('x', function(d, i){
                    return xScale(i);
                })
                .attr('y', function(d){
                    console.log('d => ',d)
                    console.log('d[1]', d[1])
                    return yScale(d[1]);
                })
                .attr('height', function(d) {
                    return yScale(d[0]) - yScale(d[1]);
                })
                .attr('width', xScale.bandwidth());
            
            svg.append('g')
                .attr('class', 'y axis')
                .attr('transform', 'translate(' + padding + ', 0)')
                .call(yAxis);

            var legend = svg.append('g')
                .attr('class', 'legend')
                .attr('transform', 'translate(' + (padding + 12) + ', 0)');

            legend.selectAll('rect')
                .data(fruits)
                .enter()
                .append('rect')
                .attr('x', 0)
                .attr('y', function(d, i){
                    return i * 18;
                })
                .attr('width', 12)
                .attr('height', 12)
                .attr('fill', function(d, i){
                    return colors(i);
                });
            
            legend.selectAll('text')
                .data(fruits)
                .enter()
                .append('text')
                .text(function(d){
                    return d;
                })
                .attr('x', 18)
                .attr('y', function(d, i){
                    return i * 18;
                })
                .attr('text-anchor', 'start')
                .attr('alignment-baseline', 'hanging');

// ************ END Stacked Bar *****************


// // set the dimensions and margins of the graph
// var margin = {top: 10, right: 10, bottom: 50, left: 60},
//     width = 600 - margin.left - margin.right,
//     height = 400 - margin.top - margin.bottom;

// // append the svg object to the body of the page
// var svg = d3.select("#testBar")
//   .append("svg")
//     .attr("width", width + margin.left + margin.right)
//     .attr("height", height + margin.top + margin.bottom)

// // Add Title 
// svg.append("text")
//         .attr("x", (width / 2) + 20)             
//         .attr("y", "20px")
//         .attr("text-anchor", "middle")  
//         .style("font-size", "15px") 
//         .style("fill", "blue")
//         .style("text-decoration", "none")  
//         .text("Annual Total Livestock Report Per SADC Member State")

// // ### Group The Canvas ###
//  let g = svg.append("g")
//     .attr("transform",
//           "translate(" + margin.left + "," + margin.top + ")");

// // Parse the Data
// // d3.json("data2JSON", function(data) {
//     let data = data2JSON

// // ### Group X Axis - To Add Label ###
//     let xAxisGroup = g.append("g")
//                         .attr("class", "bottom axis")
//                         .attr("transform", "translate(0," + height + ")")

// // ### Group Y Axis - TO Add Label###
//     let yAxisGroup = g.append("g")
//                 .attr("class","left axis")

    
//     // create a list of keys
// // var keys = ["Mister A", "Brigitte", "Eleonore", "Another friend", "Batman"]
//     let keys = []

//     for (let ele of data) {
//         keys.push(ele.livestock + 
//             ' ' + ele.memberState + ' '
//                 + new Date(ele.year).getFullYear())

//     }
//         var myColor = d3.scaleOrdinal()
//                         .domain({data})
//                         .range(d3.schemeSet1);

//         var colors = d3.scaleOrdinal(d3.schemeCategory10)     
        
//         // Set up stack
//         var stack = d3.stack()
//                 .keys(keys)
//                 .order(d3.stackOrderDescending)

//         var series = stack(data)




// // Start Legend
// const SVG = d3.select("#testBar")

// let t = d3.transition().duration(1100)

// // X axis Scale
// let x = d3.scaleBand()
//   .range([ 0, width ])
//   .domain(data.map(function(d) { return new Date(d.year).getFullYear(); }))
//   .padding(0.2);

// // Y axis Scale
// var y = d3.scaleLinear()
//   .domain([0, 70000])
//   .range([ height, 0])

// // svg.append("g")
// //   .call(d3.axisLeft(y));

// // svg.append("g")
// //   .attr("transform", "translate(0," + height + ")")
// //   .call(d3.axisBottom(x))
// //   .selectAll("text")
// //     .attr("transform", "translate(-10,0)rotate(-45)")
// //     .style("text-anchor", "end");

//    // ## Add Label on X Axis ##
//    let xLabel = g.append("text")
//         .attr("class", "x-axis label")
//         .attr("x", width/2)
//         .attr("y", height+ 45)
//         .attr("font-size", "13px")
//         .attr("text-anchor", "middle")
//         .style("fill", "blue")
//         .text("Year")

//     // ## Add Label on Y Axis ##
//     let yLabel = g.append("text")
//         .attr("class", "y-axis label")
//         .attr("x", -(height / 2))
//         .attr("y", -40)
//         .attr("font-size", "13px")
//         .attr("text-anchor", "middle")
//         .style("fill", "blue")
//         .attr("transform", "rotate(-90)")
//         .text("Annual Total")

//     //## Set up the X Axis Generator ##
//     let xAxis = d3.axisBottom(x)

//     //## Add group to the X Axis and add Transition ##
//     xAxisGroup.transition(t)
//         .call(xAxis)
//         .selectAll("text")
//             .attr("text-anchor", "end")
//             .attr("transform", "rotate(-40)")

//         //## Set up the Y Axis Generator to be located on left side of the canvas ##
//     let yAxis = d3.axisLeft(y)
//         .ticks(3)
//         .tickFormat(d => {
//             return d
//         })

//     //## Add Group to the Y axis ##
//     yAxisGroup.transition(t)
//         .call(yAxis)

// //   Draw Bar Chart
//     let rectangles = g.selectAll("rect")
//     // .data(data, (d) => {return (d.livestock)})
//         .data(data)

//     rectangles.exit()
//             .transition(t)
//                 .attr("y", y(0))
//                 .attr("height", 0)
//             .remove()

// rectangles
//     .enter()
//     .append("rect")
//     .attr("x", function(d) { return x(new Date(d.year).getFullYear()); })
//     .attr("width", x.bandwidth())
//     .attr("fill", function(d,i){return colors(i)})
//     .attr("height", function(d) { return height - y(0); }) // always equal to 0
//     .attr("y", function(d) { return y(0); })
//     .merge(rectangles)
    
// // Bars
// // svg.selectAll("mybar")
// //   .data(data)
// //   .exit()
// //   .remove()
// //   .enter()
// //   .append("rect")
// //     .attr("x", function(d) { return x(new Date(d.year).getFullYear()); })
// //     .attr("width", x.bandwidth())
//     // .attr("fill", function(d,i){return colors(d.quantity)})
//     // .attr("fill", function(d,i){return colors(i)})
//     // no bar at the beginning thus:
//     // .attr("height", function(d) { return height - y(0); }) // always equal to 0
//     // .attr("y", function(d) { return y(0); })




// // ### Set up Legend
// var color = d3.scaleOrdinal()
//   .domain(keys)
//   .range(d3.schemeSet1);

// var n = data.length/4
// console.log('data length', data.length)
// var itemWidth = 50;
// var itemHeight = 20;
// // Add one dot in the legend for each name.
// var size = 20

// // Animation
// svg.selectAll("rect")
//   .transition()
//   .duration(800)
//   .attr("y", function(d) { return y(d.quantity); })
//   .attr("height", function(d) { return height - y(d.quantity); })
//   .delay(function(d,i){console.log(i) ; return(i*100)})


}

// #### END Bar Chart ####

// *********************************************************************************************************

// #### START PIE CHART ####
// Create chart instance
const createPieChart = (dataJSON) => {
    let data = ""
    let chart = ""

    // Load the Visualization API and the piechart package.
    // google.charts.load('current', {'packages':['corechart']});

    // Set a callback to run when the Google Visualization API is loaded.
    google.charts.setOnLoadCallback(drawChart.bind(this, dataJSON))
    
    function drawChart(result) {
        // console.log('pie chart',result)
      // Create our data table.
      data = new google.visualization.DataTable();
      data.addColumn('string', 'Topping');
      data.addColumn('number', 'Slices');
    //   // for (let i=1; i<=10; i++) {
    //   //   data.addRow(["one " + ob, i]);
    //   // }
      for (const val of result.data2) {
        //   console.log(val)
            data.addRow([val.livestock + ' ' 
            + val.memberState + ' '
            + new Date(val.year).getFullYear(), val.quantity]);
      }

    // // Set chart options
      const options = {'title':'Annual Livestock Report Per SADC Member State',
              'width':650,
              'height':500
      };

    //   // Instantiate and draw our chart, passing in some options.
      chart = new google.visualization.PieChart(document.getElementById('pieArea'));
      google.visualization.events.addListener(chart, 'select', selectHandler);
      chart.draw(data, options);
    }

    function selectHandler() {
      const selectedItem = chart.getSelection()[0];
      const value = data.getValue(selectedItem.row, 0);
      alert('You user selected ' + value);
    }


}


// #### END PIE CHART ####
// Checks if button is pressed
document.body.addEventListener("submit", async function(event) {
    
    
    event.preventDefault()

    const form = event.target
    // console.log(form)
    // Clear Page Display Area
    document.getElementById("nodata").style.display = "none"
    document.getElementById("nodata2").style.display = "none"

    //let checkFlag = document.querySelector("input[name=indicator]:checked").value

    //CheckFlag = A, Quantity...checkFlag = B, Year
    // console.log(form.member)
    const result = await fetch("/production/analytics", {

        method: "POST",
        body: new URLSearchParams([...(new FormData(form))])
    })
        .then((response) => response.json())
        .then(result => {
            // console.log('Result: ', result)
        loader.style.display = "none"
        // barSelect.classList.add("active")
        //console.log(result.data)
        // result.data.forEach(d => {
        //         d.quantity = +d.quantity
        //     })
        // Checks if query returns data
        if (result.data1.length == 0 || result.data2.length == 0) {
            // chart1.dispose()
            // chart2.dispose()
            document.getElementById("nodata2").style.display = "block"
        } else {
            document.getElementById("nodata2").style.display = "none"
            // console.log(result.data)
            createPieChart(result)
            lineChart(result.data1, result.data2)
            barChart(result.data1, result.data2, result.data3)
            // drawTable(result.data2)
           
            
            // drawPie(result.data)
            // drawBar(result.data)
        }


    })
    .catch(error => console.log(error)) 
})

    //#### END Function to create Analytics ####

// Start Accordion Script
$(document).ready(function() {
    // Add minus icon for collapse element which is open by default
    $(".collapse.show").each(function(){
        // $(this).prev(".card-header").find(".plus").addClass("fa-minus").removeClass("fa-plus");
        $(this).prev(".card-header").find(".plus").toggleClass("bar")

    });
    
    // Toggle plus minus icon on show hide of collapse element
    $(".collapse").on('show.bs.collapse', function(){
        // $(this).prev(".card-header").find(".plus").removeClass("fa-plus").addClass("fa-minus");
        $(this).prev(".card-header").find(".plus").toggleClass("bar");
    }).on('hide.bs.collapse', function(){
        // $(this).prev(".card-header").find(".plus").removeClass("fa-minus").addClass("fa-plus");
        $(this).prev(".card-header").find(".plus").toggleClass("bar");
    });

});
                                  
    // END Accordion Script

    // Data Table
//     $(document).ready( function () {
//       $('#tableArea').DataTable();
//   } );
</script>